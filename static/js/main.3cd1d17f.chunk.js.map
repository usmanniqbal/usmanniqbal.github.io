{"version":3,"sources":["pages/About.js","logo.svg","pages/home.js","AppUrlListener.jsx","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["About","className","Home","src","logo","alt","to","CapApp","Plugins","App","AppUrlListener","console","log","history","useHistory","useEffect","addListener","data","slug","url","split","pop","push","style","marginTop","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gPAWeA,EATD,kBACV,gCACI,oBAAIC,UAAU,aAAd,oCACA,4GCLO,MAA0B,iCCuB1BC,EAjBF,kBACT,sBAAKD,UAAU,MAAf,UACI,oBAAIA,UAAU,aAAd,0BACA,uGAIA,yBAAQA,UAAU,aAAlB,UACI,qBAAKE,IAAKC,EAAMH,UAAU,WAAWI,IAAI,SACzC,sCACS,8CADT,0BAGA,cAAC,IAAD,CAAMC,GAAG,SAAT,0BCfCC,E,MAAWC,EAAhBC,IAuBOC,EArBQ,WACnBC,QAAQC,IAAI,+BACZ,IAAIC,EAAUC,cAgBd,OAfAC,qBAAU,WACNR,EAAOS,YAAY,cAAc,SAACC,GAC9BN,QAAQC,IAAI,2BAGZ,IAAMM,EAAOD,EAAKE,IAAIC,MAAM,OAAOC,MAC/BH,IACAP,QAAQC,IAAR,2CAAgDM,IAChDL,EAAQS,KAAKJ,SAKtB,IAEI,MCGIT,MAlBf,WACE,OACE,cAAC,IAAD,UACE,sBAAKR,UAAU,iBAAiBsB,MAAO,CAAEC,UAAW,IAApD,UACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,SAAZ,SACE,cAAC,EAAD,eCNGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKMQ,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCVnCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDoHlB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBlB,MAAK,SAACmB,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJzC,QAAQyC,MAAMA,EAAMC,YCjHpC1B,M","file":"static/js/main.3cd1d17f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst About = () => (\n    <div>\n        <h1 className=\"title is-1\">This is the About Page</h1>\n        <p>\n            Class aptent taciti sociosqu ad litora torquent per conubia nostra, per\n        </p>\n    </div>\n);\n\nexport default About;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","// pages/Home.js\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport logo from '../logo.svg';\n\nconst Home = () => (\n    <div className=\"App\">\n        <h1 className=\"title is-1\">Native Pages</h1>\n        <p>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras gravida,\n        </p>\n\n        <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <p>\n                Edit <code>src/App.js</code> and save to reload.\n            </p>\n            <Link to=\"/about\">About</Link>\n        </header>\n    </div >\n);\n\nexport default Home;","import { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Plugins } from '@capacitor/core';\nconst { App: CapApp } = Plugins;\n\nconst AppUrlListener = () => {\n    console.log('Native: Into AppUrlListener');\n    let history = useHistory(); \n    useEffect(() => {\n        CapApp.addListener('appUrlOpen', (data) => {\n            console.log('Native: Into appUrlOpen');\n            // Example url: https://beerswift.app/tabs/tab2\n            // slug = /tabs/tab2\n            const slug = data.url.split('.io').pop();\n            if (slug) {\n                console.log(`Native: Into appUrlOpen: pushing ${slug}`);\n                history.push(slug);\n            }\n            // If no match, do nothing - let regular routing\n            // logic take over\n        });\n    }, []);\n\n    return null;\n};\n\nexport default AppUrlListener;","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\nimport About from './pages/About';\nimport Home from './pages/home';\nimport AppUrlListener from './AppUrlListener';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"container mt-2\" style={{ marginTop: 40 }}>\n        <AppUrlListener></AppUrlListener>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://cra.link/PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://cra.link/PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.unregister();\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}